maximal 1 Client-Align pro Container zulassen, ansonsten Fehler!
dahinter darf nichts stehen, davor nur Leerzeichen oder Tabulatoren (NO_OBJECTS_METHODS)
Code verbessern
Components von übergeordneter Klasse ableiten
vorerst nur so möglich, da file-Protokol vom Browser nicht unterstützt wird (Python-FastAPI)
Fehler wenn kein Name in XML vorhanden ist
einzelnes CSS (also für eine ID) als Liste erstellen
Komponente zur Laufzeit erstellen mit Events
Möglichkeit, um visuelle Komponenten über XML-Layout anstelle über HTML zu erstellen (siehe tableview)
Dateien strukturieren
individuelle Serverkomponenten (PythonFastAPI) für Sample-Projekt erstellen (da diese Komponenten individuell - d.h. direkt an das Serverprogramm angepasst sind, sind Parameter wohl auch nicht notwendig)
Desktop-Übersetzer (entweder win32, lcl oder qt) implementieren

ERLEDIGT:
uicomponents-Dateien für HTML, QT usw. unterteilen
bei IMPORTS in py-Datei unterscheiden zwischen # und #! (bei #! muss das Verzeichnis mitangegeben werden - z.B. python-fastapi, bei # wird direkt in components/uicomponents/html gesucht) - Anmerkung: siehe sample-server-generator und builder
ElementTree bei HTML ersetzen (nicht nötig, mit HTMLParser kann man HTML-Code in ein Element übersetzen und mit method=html kann man ein Element in einen korrekten HTML-String übersetzen)
korrektes HTML-Gerüst bauen
besseren Code für generate_dom_element
CSS trennen
Container sollte auch html-Methode bekommen
generate_event_handlers!!!
innerText/innerHTML funktioniert noch nicht

#CUSTOM_COMPONENTS_IMPORTS_BEGIN
#MODE=NEW_APPLICATION
#components/servercomponents/python-fastapi/fastapi-main.py
#components/servercomponents/python-fastapi/helloworld.py
#CUSTOM_COMPONENTS_IMPORTS_END

#MODE=NEW_APPLICATION soll bedeuten, dass diese Imports in einem neuen Programm verwaltet werden